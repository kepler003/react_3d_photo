{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["calc","x","y","window","innerHeight","innerWidth","trans","s","shadow","color","App","useSpring","xys","props","set","className","div","style","boxShadow","interpolate","transform","backgroundColor","onMouseMove","clientX","clientY","onMouseLeave","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNAIMA,G,MAAO,SAACC,EAAGC,GAAJ,MAAU,EAAEA,EAAIC,OAAOC,YAAc,GAAK,IAAKH,EAAIE,OAAOE,WAAa,GAAK,EAAG,OACtFC,EAAQ,SAACL,EAAGC,EAAGK,GAAP,2CAA2CN,EAA3C,wBAA4DC,EAA5D,sBAA2EK,EAA3E,MACRC,EAAS,SAACP,EAAGC,EAAGK,GAAP,kBAAkB,EAAK,KAAOA,EAAI,GAAlC,cAA2C,EAAK,KAAOA,EAAI,GAA3D,cAAoE,EAAK,IAAM,EAAIA,GAAnF,uBACTE,EAAQ,SAACR,EAAGC,EAAGK,GAAP,8BAA8B,GAAMN,EAAI,IAAxC,OAqBCS,MAnBf,WAAgB,IAAD,EAEQC,aAAU,iBAAO,CAAEC,IAAK,CAAC,EAAG,EAAG,OAFvC,mBAENC,EAFM,KAECC,EAFD,KAIb,OACE,yBAAKC,UAAW,WACd,kBAAC,IAASC,IAAV,CACAD,UAAW,OACXE,MAAO,CACLC,UAAWL,EAAMD,IAAIO,YAAYX,GACjCY,UAAWP,EAAMD,IAAIO,YAAYb,GACjCe,gBAAiBR,EAAMD,IAAIO,YAAYV,IAEzCa,YAAa,gBAAYrB,EAAZ,EAAGsB,QAAqBrB,EAAxB,EAAesB,QAAf,OAAgCV,EAAI,CAAEF,IAAKZ,EAAKC,EAAGC,MAChEuB,aAAc,kBAAMX,EAAI,CAACF,IAAK,CAAC,EAAG,EAAG,UCXvBc,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f98401f2.chunk.js","sourcesContent":["import React from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport './styles/styles.css';\n\nconst calc = (x, y) => [(y - window.innerHeight / 2) / 8, -(x - window.innerWidth / 2) / 8, 1.1];\nconst trans = (x, y, s) => `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\nconst shadow = (x, y, s) => `0 ${1 + (100 * (s - 1))}px ${3 + (200 * (s - 1))}px ${1 + (30 * (1 - s))}px hsl(0, 0%, 65%)`;\nconst color = (x, y, s) => `hsl(220, 50%, ${50 + (x / 1.5)}%)`;\n\nfunction App() {\n  \n  const [props, set] = useSpring(() => ({ xys: [0, 0, 1] }));\n\n  return (\n    <div className={'wrapper'}>\n      <animated.div\n      className={'card'}\n      style={{ \n        boxShadow: props.xys.interpolate(shadow),\n        transform: props.xys.interpolate(trans),\n        backgroundColor: props.xys.interpolate(color)\n      }}\n      onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\n      onMouseLeave={() => set({xys: [0, 0, 1]})} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}